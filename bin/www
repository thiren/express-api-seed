#!/usr/bin/env node

'use strict';

/**
 * Module dependencies.
 */

require('../utilities/logging/logger');

const app = require('../app');
const http = require('http');
const async = require('async');
const config = require('config');

const {initMongoConnection, closeMongoConnection} = require('../utilities/mongodb-service');

/**
 * Server startup procedure.
 */

async.series([
    initialiseProcessEventListeners,
    initialiseMongodbConnection,
    initialiseExpressServer
], function (err) {
    if (err) {
        console.error(err);
        return process.exit(1);
    }
});

function initialiseProcessEventListeners(callback) {
    /**
     * Listen for process warnings, exceptions and exit events.
     */

    process.on('warning', function (warning) {
        console.warn({message: 'Warning', warning: warning});
    });

    process.on('uncaughtException', function (err) {
        console.error({message: 'Unhandled exception', error: err});

        closeMongoConnection();
        process.exit(1);
    });

    process.on('unhandledRejection', function (reason, p) {
        console.error('Unhandled Rejection at: Promise', p, 'reason:', reason);

        closeMongoConnection();
        process.exit(1);
    });

    process.on('SIGINT', function () {
        console.warn('Received SIGINT. Process is busy exiting');

        closeMongoConnection();
        process.exit(0);
    });

    process.on('exit', function (code) {
        console.warn('Process is exiting with code: ' + code);
    });

    callback();
}

function initialiseMongodbConnection(callback) {
    initMongoConnection(config.get('mongodb'), (err) => {
        if (err) {
            return callback(err);
        }

        console.log('mongodb connection established');
        callback();
    });
}

function initialiseExpressServer(callback) {
    /**
     * Get port from environment and store in Express.
     */

    const port = normalizePort(config.get('server.port'));
    app.set('port', port);

    /**
     * Create HTTP server.
     */

    const server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

    callback();

    /**
     * Normalize a port into a number, string, or false.
     */

    function normalizePort(val) {
        const port = parseInt(val, 10);

        if (isNaN(port)) {
            // named pipe
            return val;
        }

        if (port >= 0) {
            // port number
            return port;
        }

        return false;
    }

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        const bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
        const addr = server.address();
        const bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        console.info('Listening on ' + bind);
    }
}
